#!/usr/bin/env ruby

require "bundler/setup"
require "imap_clear"

$host = nil
$user = nil
$pass = nil

def process_cmd_line_args
  arg_errors = false
  errs = []

  $host = ARGV.shift
  $user = ARGV.shift
  $pass = ARGV.shift

  if $host.nil?
    arg_errors = true
    errs << "Missing server host address (mail.example.com)"
  end

  if $user.nil?
    arg_errors = true
    errs << "Missing user name (user@example.com)"
  end

  if $pass.nil?
    arg_errors = true
    errs << "Missing user password"
  end

  if ARGV.count > 0
    arg_errors = true
    errs << "Unexpected arguments: #{ARGV.join("|")}"
  end

  if arg_errors
    raise ArgumentError, "\n" + errs.join("\n")
  end
end

def get_app the_host, the_user, the_pass
  app = ImapClear::App.new
  app.host = the_host
  app.port = 993
  app.user = the_user
  app.pass = the_pass

  app
end

def connect_to_server
  app = get_app($host, $user, $pass)

  app.connect
  app.login

  app
end

def print text
  $stdout.print text; $stdout.flush
end

def daemon_email
  ENV["IMAPCLEAN_DAEMON_EMAIL"]
end

def username
  $user
end

def uids_from_daemon app
  app.get_uids_where_from(daemon_email)
end

def uids_of_bodies_with_invalid_email app
  app.get_uids_where_body_contains "#{username}@"
end

def emails_to_clean_count
  app = connect_to_server

  print "#{uids_from_daemon(app).count} emails to clean\n"

  app.disconnect
end

def invalid_emails_to_clean_count
  app = connect_to_server

  print "#{uids_of_bodies_with_invalid_email(app).count} emails to clean\n"

  app.disconnect
end

def clean_server
  clean_emails_from_daemon

  clean_emails_to_user
end

def clean_emails_from_daemon
  app = connect_to_server
  uids = uids_from_daemon(app)
  start_count = uids.count

  print "\nCleaning emails from #{daemon_email}.\n"
  app.delete_uids uids

  app.expunge

  final_count = uids_from_daemon(app).count

  print "\nDeleted #{start_count - final_count} of #{start_count} emails.\n"
  app.disconnect
end

def clean_emails_to_user
  app = connect_to_server
  uids = uids_of_bodies_with_invalid_email(app)
  start_count = uids.count

  print "\nCleaning emails containing #{username}@nnn.nnn.nnn.nnn.\n"
  app.delete_uids uids

  app.expunge

  final_count = uids_of_bodies_with_invalid_email(app).count

  print "\nDeleted #{start_count - final_count} of #{start_count} emails.\n"
  app.disconnect
end


process_cmd_line_args
clean_server
